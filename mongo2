// ===============================================
// Student Management System Using MongoDB and MVC
// ===============================================

// Step 1: Import dependencies
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');

// Step 2: Initialize Express app
const app = express();
app.use(bodyParser.json());

// ===============================
// MODEL (models/student.js)
// ===============================
const studentSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
    trim: true
  },
  age: {
    type: Number,
    required: true,
    min: 1
  },
  course: {
    type: String,
    required: true
  }
});

const Student = mongoose.model('Student', studentSchema);

// ===============================
// CONTROLLER (controllers/studentController.js)
// ===============================
const studentController = {
  // Create a new student
  createStudent: async (req, res) => {
    try {
      const { name, age, course } = req.body;
      const student = new Student({ name, age, course });
      await student.save();
      res.status(201).json({ message: 'Student created successfully', student });
    } catch (err) {
      res.status(400).json({ error: err.message });
    }
  },

  // Get all students
  getAllStudents: async (req, res) => {
    try {
      const students = await Student.find();
      res.status(200).json(students);
    } catch (err) {
      res.status(500).json({ error: err.message });
    }
  },

  // Update student by ID
  updateStudent: async (req, res) => {
    try {
      const { name, age, course } = req.body;
      const student = await Student.findByIdAndUpdate(
        req.params.id,
        { name, age, course },
        { new: true, runValidators: true }
      );
      if (!student) return res.status(404).json({ message: 'Student not found' });
      res.json({ message: 'Student updated successfully', student });
    } catch (err) {
      res.status(400).json({ error: err.message });
    }
  },

  // Delete student by ID
  deleteStudent: async (req, res) => {
    try {
      const student = await Student.findByIdAndDelete(req.params.id);
      if (!student) return res.status(404).json({ message: 'Student not found' });
      res.json({ message: 'Student deleted successfully' });
    } catch (err) {
      res.status(400).json({ error: err.message });
    }
  }
};

// ===============================
// ROUTES (routes/studentRoutes.js)
// ===============================
const router = express.Router();

router.post('/students', studentController.createStudent);      // Create
router.get('/students', studentController.getAllStudents);      // Read
router.put('/students/:id', studentController.updateStudent);   // Update
router.delete('/students/:id', studentController.deleteStudent);// Delete

app.use('/api', router);

// ===============================
// DATABASE CONNECTION & SERVER
// ===============================
mongoose.connect('mongodb://127.0.0.1:27017/studentdb')
  .then(() => console.log('✅ MongoDB connected successfully'))
  .catch(err => console.log('❌ MongoDB connection failed:', err));

const PORT = 3000;
app.listen(PORT, () => {
  console.log(`🚀 Server running on http://localhost:${PORT}`);
});

// ===============================================
// END OF FILE
// ===============================================
